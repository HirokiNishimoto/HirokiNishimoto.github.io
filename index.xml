<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>にっしーの備忘録</title>
    <link>https://hirokinishimoto.github.io/</link>
    <description>Recent content on にっしーの備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 02 Nov 2019 21:13:27 +0900</lastBuildDate>
    
	<atom:link href="https://hirokinishimoto.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MatplotlibのグラフをRetinaの高解像度で表示する方法</title>
      <link>https://hirokinishimoto.github.io/posts/matplotlib%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%95%E3%82%92retina%E3%81%AE%E9%AB%98%E8%A7%A3%E5%83%8F%E5%BA%A6%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 02 Nov 2019 21:13:27 +0900</pubDate>
      
      <guid>https://hirokinishimoto.github.io/posts/matplotlib%E3%81%AE%E3%82%B0%E3%83%A9%E3%83%95%E3%82%92retina%E3%81%AE%E9%AB%98%E8%A7%A3%E5%83%8F%E5%BA%A6%E3%81%A7%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</guid>
      <description>[この記事]()が参考になった。
%config InlineBackend.figure_format = &amp;#39;retina&amp;#39;</description>
    </item>
    
    <item>
      <title>AIC</title>
      <link>https://hirokinishimoto.github.io/posts/aic/</link>
      <pubDate>Tue, 29 Oct 2019 12:15:01 +0900</pubDate>
      
      <guid>https://hirokinishimoto.github.io/posts/aic/</guid>
      <description>平均対数尤度: $E(\log{L})$ モデルの最大対数尤度: $\log{L^*}$ モデルの自由度: $k$  としたとき、 $$ E(\log{L}) = \log{L}^* - k$$ の関係が成り立つと緑本に書いてあった。 ポアソン回帰の例でこの関係が本当に成り立つのか実験してみた。
ライブラリの読み込み import numpy as np import pandas as pd import matplotlib.pyplot as plt import scipy.stats as stats import japanize_matplotlib import seaborn as sns import statsmodels.api as sm 実験 bias1 = [] bias2 = [] n_rep = 100 size = 50 n_newdata = 100 for i in range(n_rep): # データの発生 x = np.random.randint(0,100,size=size) y = np.</description>
    </item>
    
    <item>
      <title>Rust入門</title>
      <link>https://hirokinishimoto.github.io/posts/rust%E5%85%A5%E9%96%80/</link>
      <pubDate>Wed, 16 Oct 2019 16:00:21 +0900</pubDate>
      
      <guid>https://hirokinishimoto.github.io/posts/rust%E5%85%A5%E9%96%80/</guid>
      <description>Rust Rustチュートリアル</description>
    </item>
    
    <item>
      <title>C&#43;&#43;の標準データ構造</title>
      <link>https://hirokinishimoto.github.io/posts/c&#43;&#43;%E3%81%AE%E6%A8%99%E6%BA%96%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/</link>
      <pubDate>Mon, 14 Oct 2019 22:45:17 +0900</pubDate>
      
      <guid>https://hirokinishimoto.github.io/posts/c&#43;&#43;%E3%81%AE%E6%A8%99%E6%BA%96%E3%83%87%E3%83%BC%E3%82%BF%E6%A7%8B%E9%80%A0/</guid>
      <description>stack LIFOのデータ構造
メンバ関数  push() : 要素の挿入 top() : 先頭の要素の参照 pop() : 先頭の要素の破棄 size() : 現在の要素数  計算コストは全てO(1)
練習問題
queue FIFOのデータ構造
メンバ関数  push() : 要素の挿入 front() : 先頭の要素の参照 pop() : 先頭の要素の破棄 size() : 現在の要素数  計算コストは全てO(1)
練習問題
priority_queue 挿入されたデータの中で最大の要素の参照が低数時間でできる。 実装には2分ヒープなど
メンバ関数  push() : 要素の挿入 top() : 先頭の要素の参照 pop() : 先頭の要素の破棄 size() : 現在の要素数  計算コストはtop() : O(1), push(), pop() : O(logN)
練習問題
set 集合を表現するライブラリ
種類 要素の重複を許さないもの  set : データに順序をつけて管理</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://hirokinishimoto.github.io/page/contact/</link>
      <pubDate>Wed, 02 Oct 2019 16:18:19 +0900</pubDate>
      
      <guid>https://hirokinishimoto.github.io/page/contact/</guid>
      <description> Hello </description>
    </item>
    
    <item>
      <title>About Hugo</title>
      <link>https://hirokinishimoto.github.io/page/about/</link>
      <pubDate>Wed, 09 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hirokinishimoto.github.io/page/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.</description>
    </item>
    
  </channel>
</rss>